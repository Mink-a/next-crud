import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { prisma } from "../lib/prisma";
import { useRouter } from "next/router";

interface Notes {
  notes: { title: string; id: string; content: string }[];
}
interface FormData {
  title: string;
  content: string;
  id: string;
}

const Home: NextPage<Notes> = ({ notes }) => {
  const [form, setForm] = useState<FormData>({
    title: "",
    content: "",
    id: "",
  });
  const router = useRouter();

  const refreshData = () => {
    router.replace(router.asPath);
  };

  async function create(data: FormData) {
    try {
      fetch("http://localhost:3000/api/create", {
        body: JSON.stringify(data),
        headers: {
          "Content-Type": "application/json",
        },
        method: "POST",
      }).then(() => {
        if(data.id){
          deleteNote(data.id)
          setForm({ title: "", content: "", id: "" });
          refreshData();
        }else{
          setForm({ title: "", content: "", id: "" });
          refreshData();
        }
      });
    } catch (error) {
      console.log(error);
    }
  }

  async function deleteNote(id: string) {
    try {
      fetch(`http://localhost:3000/api/note/${id}`, {
        headers: {
          "Content-Type": "application/json",
        },
        method: "DELETE",
      }).then(() => {
        refreshData();
      });
    } catch (error) {
      console.log(error);
    }
  }

  const handleSubmit = async (data: FormData) => {
    try {
      create(data);
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="title" content="Create Next App" />
        <meta
          name="description"
          content="Generated by create next app with Tailwind Css, The best App ever You can try, YOYO!!"
        />

        <meta property="og:type" content="website" />
        <meta
          property="og:url"
          content="https://37983d47009e797059468c94e39dcdf0.loophole.site/"
        />
        <meta property="og:title" content="Create Next App" />
        <meta
          property="og:description"
          content="Generated by create next app with Tailwind Css, The best App ever You can try, YOYO!!"
        />
        <meta property="og:image" content="" />

        <meta property="twitter:card" content="summary_large_image" />
        <meta
          property="twitter:url"
          content="https://37983d47009e797059468c94e39dcdf0.loophole.site/"
        />
        <meta property="twitter:title" content="Create Next App" />
        <meta
          property="twitter:description"
          content="Generated by create next app with Tailwind Css, The best App ever You can try, YOYO!!"
        />
        <meta property="twitter:image" content="" />
      </Head>
      <h1 className="mt-5 text-center text-4xl font-bold text-indigo-500">
        Notes
      </h1>
      <form
        onSubmit={(e) => {
          e.preventDefault();
          handleSubmit(form);
        }}
        className="mx-auto mt-2 max-w-2xl px-4 sm:px-0"
      >
        <label className="block">
          <span className="text-gray-700">Title</span>
          <input
            type="text"
            className="mt-1 block w-full rounded"
            placeholder="Title"
            value={form.title}
            onChange={(e) => {
              setForm({ ...form, title: e.target.value });
            }}
          />
        </label>
        <label className="mt-5 block">
          <span className="text-gray-700">Content</span>
          <textarea
            className="mt-1 block w-full rounded"
            placeholder="What's your next idea?"
            rows={5}
            value={form.content}
            onChange={(e) => setForm({ ...form, content: e.target.value })}
          ></textarea>
        </label>
        <button
          type="submit"
          className="mt-5 block w-full rounded border-2 border-solid border-indigo-500 bg-indigo-500 px-3 py-1 font-bold text-white hover:bg-transparent hover:text-indigo-500"
        >
          Add Note
        </button>
      </form>
      <div className="mx-auto mt-2 max-w-2xl px-4 sm:px-0">
        <ul>
          {notes.map((note) => {
            return (
              <li
                key={note.id}
                className="group mt-4 border-b border-indigo-700"
              >
                <div className="flex items-center justify-between">
                  <div className="">
                    <h3 className="font-bold">{note.title}</h3>
                    <p className="mb-1 text-sm">{note.content}</p>
                  </div>
                  <div className="flex gap-2">
                    <div onClick={()=>{setForm({ title: note.title, content: note.content, id: note.id })}} className="hidden cursor-pointer group-hover:block">
                      <svg
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fillRule="evenodd"
                          clipRule="evenodd"
                          d="M21.2635 2.29289C20.873 1.90237 20.2398 1.90237 19.8493 2.29289L18.9769 3.16525C17.8618 2.63254 16.4857 2.82801 15.5621 3.75165L4.95549 14.3582L10.6123 20.0151L21.2189 9.4085C22.1426 8.48486 22.338 7.1088 21.8053 5.99367L22.6777 5.12132C23.0682 4.7308 23.0682 4.09763 22.6777 3.70711L21.2635 2.29289ZM16.9955 10.8035L10.6123 17.1867L7.78392 14.3582L14.1671 7.9751L16.9955 10.8035ZM18.8138 8.98525L19.8047 7.99429C20.1953 7.60376 20.1953 6.9706 19.8047 6.58007L18.3905 5.16586C18 4.77534 17.3668 4.77534 16.9763 5.16586L15.9853 6.15683L18.8138 8.98525Z"
                          fill="#00f"
                        />
                        <path
                          d="M2 22.9502L4.12171 15.1717L9.77817 20.8289L2 22.9502Z"
                          fill="#00f"
                        />
                      </svg>
                    </div>
                    <div
                      onClick={() => {
                        deleteNote(note.id);
                      }}
                      className="hidden cursor-pointer group-hover:block"
                    >
                      <svg
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M8 11C7.44772 11 7 11.4477 7 12C7 12.5523 7.44772 13 8 13H16C16.5523 13 17 12.5523 17 12C17 11.4477 16.5523 11 16 11H8Z"
                          fill="#f00"
                        />
                        <path
                          fillRule="evenodd"
                          clipRule="evenodd"
                          d="M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z"
                          fill="#f00"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </li>
            );
          })}
        </ul>
      </div>
    </>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async () => {
  const notes = await prisma.note.findMany({
    select: { title: true, content: true, id: true },
  });

  return { props: { notes } };
};
